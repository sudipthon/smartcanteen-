docker build . -t <image_name>
    docker build . -t <image_name>:<tag>
    docker build . -t <image_name>:<tag> -f <Dockerfile_name>
docker run <inageid>/<>

docker-compose build
build using no cache
    docker-compose build --no-cache
docker-compose up


list images
    docker images / docker image ls

    list only id of images 
        docker images -q
    

removing image 
    docker rmi -f <image_id>

    remove all images at once
            docker rmi  -f $(docker images -q)


list containers
    docker ps -a
    docker container ls -a

remove conatiner
    docker rm -f <container_id>


listing dir inside contianer 
    docker run -it --rm <image_name> ls /app/

stoping container 
    docker-compose down


start docker
    sudo systemctl start docker

restart docker
    sudo systemctl restart docker


(deattached mode)to get different termaminal for rabbitmq,celery and django 
    docker-compose up -d
    docker-compose logs -f web   # for django
    docker-compose logs -f celery # for celery
    docker-compose logs -f rabbitmq  # for rabbitmq


to interact with image/os 
    docker run -it <image_id> /bin/bash or /bin/sh


port mapping 
    docker run -p <host_port>:<container_port> <image_id>  # 8000 is host port and 8000 is container port



To push your image, you should tag it with your Docker Hub username, like so:

docker tag <image_id> <username>/<repository>:<tag>
docker push yourusername/canteen:latest